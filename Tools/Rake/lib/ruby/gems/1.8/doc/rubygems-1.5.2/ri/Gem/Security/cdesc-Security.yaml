--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: []

comment: 
- !ruby/struct:SM::Flow::H 
  level: 1
  text: Signed Gems README
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Table of Contents
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Overview
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Walkthrough
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Command-Line Options
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: OpenSSL Reference
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Bugs/TODO
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: About the Author
  type: :BULLET
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Overview
- !ruby/struct:SM::Flow::P 
  body: Gem::Security implements cryptographic signatures in RubyGems. The section below is a step-by-step guide to using signed gems and generating your own.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Walkthrough
- !ruby/struct:SM::Flow::P 
  body: "In order to start signing your gems, you'll need to build a private key and a self-signed certificate. Here's how:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # build a private key and certificate for gemmaster@example.com\n  $ gem cert --build gemmaster@example.com\n"
- !ruby/struct:SM::Flow::P 
  body: This could take anywhere from 5 seconds to 10 minutes, depending on the speed of your computer (public key algorithms aren't exactly the speediest crypto algorithms in the world). When it's finished, you'll see the files &quot;gem-private_key.pem&quot; and &quot;gem-public_cert.pem&quot; in the current directory.
- !ruby/struct:SM::Flow::P 
  body: "First things first: take the &quot;gem-private_key.pem&quot; file and move it somewhere private, preferably a directory only you have access to, a floppy (yuck!), a CD-ROM, or something comparably secure. Keep your private key hidden; if it's compromised, someone can sign packages as you (note: PKI has ways of mitigating the risk of stolen keys; more on that later)."
- !ruby/struct:SM::Flow::P 
  body: "Now, let's sign an existing gem. I'll be using my Imlib2-Ruby bindings, but you can use whatever gem you'd like. Open up your existing gemspec file and add the following lines:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # signing key and certificate chain\n  s.signing_key = '/mnt/floppy/gem-private_key.pem'\n  s.cert_chain  = ['gem-public_cert.pem']\n"
- !ruby/struct:SM::Flow::P 
  body: (Be sure to replace &quot;/mnt/floppy&quot; with the ultra-secret path to your private key).
- !ruby/struct:SM::Flow::P 
  body: "After that, go ahead and build your gem as usual. Congratulations, you've just built your first signed gem! If you peek inside your gem file, you'll see a couple of new files have been added:"
- !ruby/struct:SM::Flow::VERB 
  body: "  $ tar tf tar tf Imlib2-Ruby-0.5.0.gem\n  data.tar.gz\n  data.tar.gz.sig\n  metadata.gz\n  metadata.gz.sig\n"
- !ruby/struct:SM::Flow::P 
  body: "Now let's verify the signature. Go ahead and install the gem, but add the following options: &quot;-P HighSecurity&quot;, like this:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # install the gem with using the security policy &quot;HighSecurity&quot;\n  $ sudo gem install Imlib2-Ruby-0.5.0.gem -P HighSecurity\n"
- !ruby/struct:SM::Flow::P 
  body: The -P option sets your security policy -- we'll talk about that in just a minute. Eh, what's this?
- !ruby/struct:SM::Flow::VERB 
  body: "  Attempting local installation of 'Imlib2-Ruby-0.5.0.gem'\n  ERROR:  Error installing gem Imlib2-Ruby-0.5.0.gem[.gem]: Couldn't\n  verify data signature: Untrusted Signing Chain Root: cert =\n  '/CN=gemmaster/DC=example/DC=com', error = 'path\n  &quot;/root/.rubygems/trust/cert-15dbb43a6edf6a70a85d4e784e2e45312cff7030.pem&quot;\n  does not exist'\n"
- !ruby/struct:SM::Flow::P 
  body: "The culprit here is the security policy. RubyGems has several different security policies. Let's take a short break and go over the security policies. Here's a list of the available security policies, and a brief description of each one:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: NoSecurity - Well, no security at all. Signed packages are treated like unsigned packages.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: LowSecurity - Pretty much no security. If a package is signed then RubyGems will make sure the signature matches the signing certificate, and that the signing certificate hasn't expired, but that's it. A malicious user could easily circumvent this kind of security.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: MediumSecurity - Better than LowSecurity and NoSecurity, but still fallible. Package contents are verified against the signing certificate, and the signing certificate is checked for validity, and checked against the rest of the certificate chain (if you don't know what a certificate chain is, stay tuned, we'll get to that). The biggest improvement over LowSecurity is that MediumSecurity won't install packages that are signed by untrusted sources. Unfortunately, MediumSecurity still isn't totally secure -- a malicious user can still unpack the gem, strip the signatures, and distribute the gem unsigned.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: HighSecurity - Here's the bugger that got us into this mess. The HighSecurity policy is identical to the MediumSecurity policy, except that it does not allow unsigned gems. A malicious user doesn't have a whole lot of options here; he can't modify the package contents without invalidating the signature, and he can't modify or remove signature or the signing certificate chain, or RubyGems will simply refuse to install the package. Oh well, maybe he'll have better luck causing problems for CPAN users instead :).
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: So, the reason RubyGems refused to install our shiny new signed gem was because it was from an untrusted source. Well, my code is infallible (hah!), so I'm going to add myself as a trusted source.
- !ruby/struct:SM::Flow::P 
  body: "Here's how:"
- !ruby/struct:SM::Flow::VERB 
  body: "    # add trusted certificate\n    gem cert --add gem-public_cert.pem\n"
- !ruby/struct:SM::Flow::P 
  body: "I've added my public certificate as a trusted source. Now I can install packages signed my private key without any hassle. Let's try the install command above again:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # install the gem with using the HighSecurity policy (and this time\n  # without any shenanigans)\n  $ sudo gem install Imlib2-Ruby-0.5.0.gem -P HighSecurity\n"
- !ruby/struct:SM::Flow::P 
  body: "This time RubyGems should accept your signed package and begin installing. While you're waiting for RubyGems to work it's magic, have a look at some of the other security commands:"
- !ruby/struct:SM::Flow::VERB 
  body: "  Usage: gem cert [options]\n\n  Options:\n    -a, --add CERT          Add a trusted certificate.\n    -l, --list              List trusted certificates.\n    -r, --remove STRING     Remove trusted certificates containing STRING.\n    -b, --build EMAIL_ADDR  Build private key and self-signed certificate\n                            for EMAIL_ADDR.\n    -C, --certificate CERT  Certificate for --sign command.\n    -K, --private-key KEY   Private key for --sign command.\n    -s, --sign NEWCERT      Sign a certificate with my key and certificate.\n"
- !ruby/struct:SM::Flow::P 
  body: (By the way, you can pull up this list any time you'd like by typing &quot;gem cert --help&quot;)
- !ruby/struct:SM::Flow::P 
  body: Hmm. We've already covered the &quot;--build&quot; option, and the &quot;--add&quot;, &quot;--list&quot;, and &quot;--remove&quot; commands seem fairly straightforward; they allow you to add, list, and remove the certificates in your trusted certificate list. But what's with this &quot;--sign&quot; option?
- !ruby/struct:SM::Flow::P 
  body: "To answer that question, let's take a look at &quot;certificate chains&quot;, a concept I mentioned earlier. There are a couple of problems with self-signed certificates: first of all, self-signed certificates don't offer a whole lot of security. Sure, the certificate says Yukihiro Matsumoto, but how do I know it was actually generated and signed by matz himself unless he gave me the certificate in person?"
- !ruby/struct:SM::Flow::P 
  body: The second problem is scalability. Sure, if there are 50 gem authors, then I have 50 trusted certificates, no problem. What if there are 500 gem authors? 1000? Having to constantly add new trusted certificates is a pain, and it actually makes the trust system less secure by encouraging RubyGems users to blindly trust new certificates.
- !ruby/struct:SM::Flow::P 
  body: "Here's where certificate chains come in. A certificate chain establishes an arbitrarily long chain of trust between an issuing certificate and a child certificate. So instead of trusting certificates on a per-developer basis, we use the PKI concept of certificate chains to build a logical hierarchy of trust. Here's a hypothetical example of a trust hierarchy based (roughly) on geography:"
- !ruby/struct:SM::Flow::VERB 
  body: "                        --------------------------\n                        | rubygems@rubyforge.org |\n                        --------------------------\n                                    |\n                  -----------------------------------\n                  |                                 |\n      ----------------------------    -----------------------------\n      | seattle.rb@zenspider.com |    | dcrubyists@richkilmer.com |\n      ----------------------------    -----------------------------\n           |                |                 |             |\n    ---------------   ----------------   -----------   --------------\n    | alf@seattle |   | bob@portland |   | pabs@dc |   | tomcope@dc |\n    ---------------   ----------------   -----------   --------------\n"
- !ruby/struct:SM::Flow::P 
  body: "Now, rather than having 4 trusted certificates (one for alf@seattle, bob@portland, pabs@dc, and tomecope@dc), a user could actually get by with 1 certificate: the &quot;rubygems@rubyforge.org&quot; certificate. Here's how it works:"
- !ruby/struct:SM::Flow::P 
  body: I install &quot;Alf2000-Ruby-0.1.0.gem&quot;, a package signed by &quot;alf@seattle&quot;. I've never heard of &quot;alf@seattle&quot;, but his certificate has a valid signature from the &quot;seattle.rb@zenspider.com&quot; certificate, which in turn has a valid signature from the &quot;rubygems@rubyforge.org&quot; certificate. Voila! At this point, it's much more reasonable for me to trust a package signed by &quot;alf@seattle&quot;, because I can establish a chain to &quot;rubygems@rubyforge.org&quot;, which I do trust.
- !ruby/struct:SM::Flow::P 
  body: "And the &quot;--sign&quot; option allows all this to happen. A developer creates their build certificate with the &quot;--build&quot; option, then has their certificate signed by taking it with them to their next regional Ruby meetup (in our hypothetical example), and it's signed there by the person holding the regional RubyGems signing certificate, which is signed at the next RubyConf by the holder of the top-level RubyGems certificate. At each point the issuer runs the same command:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # sign a certificate with the specified key and certificate\n  # (note that this modifies client_cert.pem!)\n  $ gem cert -K /mnt/floppy/issuer-priv_key.pem -C issuer-pub_cert.pem\n     --sign client_cert.pem\n"
- !ruby/struct:SM::Flow::P 
  body: "Then the holder of issued certificate (in this case, our buddy &quot;alf@seattle&quot;), can start using this signed certificate to sign RubyGems. By the way, in order to let everyone else know about his new fancy signed certificate, &quot;alf@seattle&quot; would change his gemspec file to look like this:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # signing key (still kept in an undisclosed location!)\n  s.signing_key = '/mnt/floppy/alf-private_key.pem'\n\n  # certificate chain (includes the issuer certificate now too)\n  s.cert_chain  = ['/home/alf/doc/seattlerb-public_cert.pem',\n                   '/home/alf/doc/alf_at_seattle-public_cert.pem']\n"
- !ruby/struct:SM::Flow::P 
  body: Obviously, this RubyGems trust infrastructure doesn't exist yet. Also, in the &quot;real world&quot; issuers actually generate the child certificate from a certificate request, rather than sign an existing certificate. And our hypothetical infrastructure is missing a certificate revocation system. These are that can be fixed in the future...
- !ruby/struct:SM::Flow::P 
  body: "I'm sure your new signed gem has finished installing by now (unless you're installing rails and all it's dependencies, that is ;D). At this point you should know how to do all of these new and interesting things:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: build a gem signing key and certificate
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: modify your existing gems to support signing
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: adjust your security policy
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: modify your trusted certificate list
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: sign a certificate
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: If you've got any questions, feel free to contact me at the email address below. The next couple of sections
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Command-Line Options
- !ruby/struct:SM::Flow::P 
  body: "Here's a brief summary of the certificate-related command line options:"
- !ruby/struct:SM::Flow::VERB 
  body: "  gem install\n    -P, --trust-policy POLICY        Specify gem trust policy.\n\n  gem cert\n    -a, --add CERT                   Add a trusted certificate.\n    -l, --list                       List trusted certificates.\n    -r, --remove STRING              Remove trusted certificates containing\n                                     STRING.\n    -b, --build EMAIL_ADDR           Build private key and self-signed\n                                     certificate for EMAIL_ADDR.\n    -C, --certificate CERT           Certificate for --sign command.\n    -K, --private-key KEY            Private key for --sign command.\n    -s, --sign NEWCERT               Sign a certificate with my key and\n                                     certificate.\n"
- !ruby/struct:SM::Flow::P 
  body: A more detailed description of each options is available in the walkthrough above.
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Manually verifying signatures
- !ruby/struct:SM::Flow::P 
  body: "In case you don't trust RubyGems you can verify gem signatures manually:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "1."
    body: Fetch and unpack the gem
  - !ruby/struct:SM::Flow::VERB 
    body: " gem fetch some_signed_gem\n tar -xf some_signed_gem-1.0.gem\n"
  - !ruby/struct:SM::Flow::LI 
    label: "2."
    body: Grab the public key from the gemspec
  - !ruby/struct:SM::Flow::VERB 
    body: " gem spec some_signed_gem-1.0.gem cert_chain |  #       ruby -pe 'sub(/^ +/, &quot;&quot;)' &gt; public_key.crt\n"
  - !ruby/struct:SM::Flow::LI 
    label: "3."
    body: Generate a SHA1 hash of the data.tar.gz
  - !ruby/struct:SM::Flow::VERB 
    body: " openssl dgst -sha1 &lt; data.tar.gz &gt; my.hash\n"
  - !ruby/struct:SM::Flow::LI 
    label: "4."
    body: Verify the signature
  - !ruby/struct:SM::Flow::VERB 
    body: " openssl rsautl -verify -inkey public_key.crt -certin  #       -in data.tar.gz.sig &gt; verified.hash\n"
  - !ruby/struct:SM::Flow::LI 
    label: "5."
    body: Compare your hash to the verified hash
  - !ruby/struct:SM::Flow::VERB 
    body: " diff -s verified.hash my.hash\n"
  - !ruby/struct:SM::Flow::LI 
    label: "6."
    body: Repeat 5 and 6 with metadata.gz
  type: :NUMBER
- !ruby/struct:SM::Flow::H 
  level: 2
  text: OpenSSL Reference
- !ruby/struct:SM::Flow::P 
  body: "The .pem files generated by --build and --sign are just basic OpenSSL PEM files. Here's a couple of useful commands for manipulating them:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # convert a PEM format X509 certificate into DER format:\n  # (note: Windows .cer files are X509 certificates in DER format)\n  $ openssl x509 -in input.pem -outform der -out output.der\n\n  # print out the certificate in a human-readable format:\n  $ openssl x509 -in input.pem -noout -text\n"
- !ruby/struct:SM::Flow::P 
  body: "And you can do the same thing with the private key file as well:"
- !ruby/struct:SM::Flow::VERB 
  body: "  # convert a PEM format RSA key into DER format:\n  $ openssl rsa -in input_key.pem -outform der -out output_key.der\n\n  # print out the key in a human readable format:\n  $ openssl rsa -in input_key.pem -noout -text\n"
- !ruby/struct:SM::Flow::H 
  level: 2
  text: Bugs/TODO
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: There's no way to define a system-wide trust list.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: custom security policies (from a YAML file, etc)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Simple method to generate a signed certificate request
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Support for OCSP, SCVP, CRLs, or some other form of cert status check (list is in order of preference)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Support for encrypted private keys
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Some sort of semi-formal trust hierarchy (see long-winded explanation above)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Path discovery (for gem certificate chains that don't have a self-signed root) -- by the way, since we don't have this, THE ROOT OF THE CERTIFICATE CHAIN MUST BE SELF SIGNED if Policy#verify_root is true (and it is for the MediumSecurity and HighSecurity policies)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Better explanation of X509 naming (ie, we don't have to use email addresses)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Possible alternate signing mechanisms (eg, via PGP). this could be done pretty easily by adding a :signing_type attribute to the gemspec, then add the necessary support in other places
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Honor AIA field (see note about OCSP above)
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Maybe honor restriction extensions?
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Might be better to store the certificate chain as a PKCS#7 or PKCS#12 file, instead of an array embedded in the metadata. ideas?
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Possibly embed signature and key algorithms into metadata (right now they're assumed to be the same as what's set in Gem::Security::OPT)
  type: :BULLET
- !ruby/struct:SM::Flow::H 
  level: 2
  text: About the Author
- !ruby/struct:SM::Flow::P 
  body: Paul Duncan &lt;pabs@pablotron.org&gt; http://pablotron.org/
constants: []

full_name: Gem::Security
includes: []

instance_methods: []

name: Security
superclass: 
